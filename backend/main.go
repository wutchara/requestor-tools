package main

import (
	"net/http"
	"time"

	"github.com/gin-contrib/cors" // Import the cors middleware
	"github.com/gin-gonic/gin"

	docs "requestor-tools-backend/docs" // docs is generated by Swag CLI

	swaggerFiles "github.com/swaggo/files"     // swagger embed files
	ginSwagger "github.com/swaggo/gin-swagger" // gin-swagger middleware
)

type Message struct {
	Text string `json:"text"`
}

// PageData holds the data to be passed to the HTML template.
type PageData struct {
	Title       string
	TimePrefix  string
	InitialTime string
}

// 2. Define the GET route. The handler is now much cleaner.
// @Summary Greet the user
// @Description Get a greeting message from the backend
// @Produce json
// @Success 200 {object} Message
// @Router /greet [get]
func Greet(c *gin.Context) {
	msg := Message{Text: "Hello from the Go backend! ðŸ‘‹"}

	// The middleware has already handled the CORS headers for you.
	c.JSON(http.StatusOK, msg)
}

// Define a GET route for '/page/start' to render the HTML template.
// @Summary Start Page
// @Description Renders a dynamic HTML start page.
// @Produce html
// @Success 200 {string} string "HTML content of the start page"
// @Router /page/start [get]
func PageStart(c *gin.Context) {
	// Create the data object to pass to the template
	data := PageData{
		Title:       "Dynamic Page with Go & Gin!",
		TimePrefix:  "The current time is ",
		InitialTime: time.Now().Format("3:04:05 PM"),
	}

	// Render the HTML template with the data
	c.HTML(http.StatusOK, "template.html", data)
}

// @title Requestor Tools API
// @version 1.0
// @description This is the API for the Requestor Tools backend.
// @termsOfService http://swagger.io/terms/

// @contact.name API Support
// @contact.url https://www.example.com/support
// @contact.email support@example.com

// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html

// @host localhost:8080
// @BasePath /
// @schemes http
func main() {
	router := gin.Default()
	docs.SwaggerInfo.BasePath = "/api/v1"

	// Load HTML templates. Gin will look for templates in the specified path.
	// The name of the template in c.HTML will be the filename, e.g., "template.html".
	router.LoadHTMLFiles("templates/template.html")

	// 1. Use the CORS middleware.
	router.Use(cors.Default())

	// 3. Define a GET route for the root path '/'.
	// @Summary Show welcome message
	// @Description Get a welcome message for the API
	// @Produce json
	// @Success 200 {object} Message
	// @Router / [get]
	router.GET("/", func(c *gin.Context) {
		welcomeMsg := Message{Text: "Welcome to the Requestor Tools API!"}
		c.JSON(http.StatusOK, welcomeMsg)
	})

	// TODO: Add Swagger UI endpoint
	v1 := router.Group("/api/v1")
	{
		eg := v1.Group("")
		{
			eg.GET("/greet", Greet)
		}
	}
	router.GET("/swagger-ui/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))
	router.GET("/page/start", PageStart)

	// 4. Start the server.
	router.Run(":8080")
}
